'scopeName': 'source.c'
'fileTypes': [
  'c'
  'h'
]
'firstLineMatch': '-[*]-( Mode:)? C -[*]-'
'name': 'C'
'patterns': [
  # comments
  {
    'include': '#comments'
  }

  # constants
  {
    'match': '\\b(NULL|true|false|TRUE|FALSE)\\b'
    'name': 'constant.language.c'
  }
  {
    # TODO minus in front does not work: -1.0
    'match': '\\b((0(x|X)[0-9a-fA-F]*)|(\\+|-)?(([0-9]+\\.?[0-9]*)|(\\.[0-9]+))((e|E)(\\+|-)?[0-9]+)?)(L|l|UL|ul|u|U|F|f|ll|LL|ull|ULL)?\\b'
    'name': 'constant.numeric.c'
  }
  {
    'match': '\\bk[A-Z][a-zA-Z0-9_]*\\b'
    'name': 'constant.other.variable.c'
    'comment': 'common C constant naming idiom -- kConstantVariable'
  }

  # keywords
  {
    'match': '\\b(break|case|continue|default|do|else|for|goto|if|_Pragma|return|switch|while)\\b'
    'name': 'keyword.control.c'
  }
  {
    'match': '\\b(sizeof)\\b'
    'name': 'keyword.operator.sizeof.c'
  }
  {
    'match': '\\b(assert)\\s*(\\()\\b'
    'captures':
      '1':
        'name': 'keyword.other.c'
      '2':
        'name': 'punctuation.section.c'
  }

  # entity
  {
    'match': '\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*(\\()'
    # 'match': '\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*(\\().*(\\))\\s*(;)'
    'captures':
      '1':
        'name': 'entity.name.function.c'
      '2':
        'name': 'punctuation.section.c'
    #   '3':
    #     'name': 'punctuation.section.c'
    #   '4':
    #     'name': 'punctuation.other.c'

    # 'begin': '\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*(\\()'
    # 'beginCaptures':
    #   '1':
    #     'name': 'entity.name.function.c'
    #   '2':
    #     'name': 'punctuation.section.c'
    # 'end': '(\\))'
    # 'endCaptures':
    #   '1':
    #     'name': 'punctuation.section.c'
  }

  # meta
  {
    'match': '^\\s*#\\s*[a-zA-Z0-9_]*\\s*(\\(.*\\))?\\b'
    'name': 'meta.preprocessor.c'
  }
  {
    'begin': '^\\s*#\\s*(error|warning)\\b'
    'captures':
      '1':
        'name': 'keyword.control.import.error.c'
    'end': '(?<!\\\\)(?=\\n)'
    'name': 'meta.preprocessor.diagnostic.c'
    'patterns': [
      {
        'match': '(?>\\\\\\s*\\n)'
        'name': 'punctuation.separator.continuation.c'
      }
    ]
  }
  
  # punctuation
  # TODO: all of them are handmade and non standard!
  {
    'match': '\\(|\\)|\\{|\\}|\\[|\\]'
    'name': 'punctuation.section.c'
  }
  {
    'match': '\\*|&|\\->|\\.'
    'name': 'punctuation.element.c'
  }
  {
    'match': '&&|\\|\\|'
    'name': 'punctuation.logical.c'
  }
  {
    'match': '[\\+\\-\\*/\\%&\\|\\^\\~]?=|\\+\\+|\\-\\-'
    'name': 'punctuation.assignment.c'
  }
  {
    'match': '[<>!]=|==|<>|<|>|!'
    'name': 'punctuation.comparison.c'
  }
  {
    'match': ',|;|:|~|\\+|-|\\*|/|\\%|\\||\\^|\\~'
    'name': 'punctuation.other.c'
  }

  # storage
  {
    'match': '\\b(asm|__asm__|auto|bool|_Bool|char|_Complex|double|enum|float|_Imaginary|int|long|short|signed|size_t|struct|typedef|union|unsigned|void)\\b'
    'name': 'storage.type.c'
  }
  {
    'match': '\\b(const|extern|register|restrict|static|volatile|inline)\\b'
    'name': 'storage.modifier.c'
  }

  # string
  {
    'begin': '(")'
    'beginCaptures':
      '0':
        'name': 'punctuation.definition.string.begin.c'
    'end': '(")'
    'endCaptures':
      '0':
        'name': 'punctuation.definition.string.end.c'
    'contentName': 'string.quoted.double.c'
    'patterns': [
      {
        'include': '#string_escaped_char'
      }
      {
        'include': '#string_placeholder'
      }
    ]
  }
  {
    'begin': '(\')'
    'beginCaptures':
      '0':
        'name': 'punctuation.definition.string.begin.c'
    'end': '(\')'
    'endCaptures':
      '0':
        'name': 'punctuation.definition.string.end.c'
    'name': 'string.quoted.single.c'
    'patterns': [
      {
        'include': '#string_escaped_char'
      }
    ]
  }

  # variables
  {
    'match': '\\bg[A-Z]\\w*\\b'
    'name': 'variable.other.readwrite.global.mac-classic.c'
  }
  {
    'match': '\\bs[A-Z]\\w*\\b'
    'name': 'variable.other.readwrite.static.mac-classic.c'
  }
]
'repository':
  # comments
  'comments':
    'patterns': [
      {
        'begin': '/\\*[^\\*]'
        'beginCaptures':
          '0':
            'name': 'punctuation.definition.comment.begin.c'
        'end': '\\*/'
        'endCaptures':
          '0':
            'name': 'punctuation.definition.comment.end.c'
        'name': 'comment.block.c'
      }
      {
        'begin': '/\\*\\*'
        'beginCaptures':
          '0':
            'name': 'punctuation.definition.comment.begin.documentation.c'
        'end': '\\*/'
        'endCaptures':
          '0':
            'name': 'punctuation.definition.comment.end.documentation.c'
        'name': 'comment.block.documentation.c'
        'patterns': [
          {
            'match': '\\@([a-zA-Z0-9_]+)\\s+'
            'name': 'comment.block.documentation.tag.c'
          }
        ]
      }
      {
        'match': '\\*/.*\\n'
        'name': 'invalid.illegal.stray-comment-end.c'
      }
      {
        'captures':
          '1':
            'name': 'meta.toc-list.banner.line.c'
        'match': '^// =(\\s*.*?)\\s*=\\s*$\\n?'
        'name': 'comment.line.banner.c++'
      }
      {
        'match': '^/\\* =(\\s*.*?)\\s*= \\*/$\\n?'
        'captures':
          '1':
            'name': 'meta.toc-list.banner.block.c'
        'name': 'comment.block.c'
      }
      {
        'begin': '(^[ \\t]+)?(?=//)'
        'beginCaptures':
          '1':
            'name': 'punctuation.whitespace.comment.leading.c++'
        'end': '(?!\\G)'
        'patterns': [
          {
            'begin': '///'
            'beginCaptures':
              '0':
                'name': 'punctuation.definition.comment.documentation.c++'
            'end': '\\n'
            'name': 'comment.line.double-slash.documentation.c++'
            'patterns': [
              {
                'match': '(?>\\\\\\s*\\n)'
                'name': 'punctuation.separator.continuation.c++'
              }
            ]
          }
          {
            'begin': '//[^/]'
            'beginCaptures':
              '0':
                'name': 'punctuation.definition.comment.c++'
            'end': '\\n'
            'name': 'comment.line.double-slash.c++'
            'patterns': [
              {
                'match': '(?>\\\\\\s*\\n)'
                'name': 'punctuation.separator.continuation.c++'
              }
            ]
          }
        ]
      }
    ]

  # string escapes
  'string_escaped_char':
    'patterns': [
      {
        'match': '\\\\(\\\\|[abefnprtv\'"?]|[0-3]\\d{,2}|[4-7]\\d?|x[a-fA-F0-9]{,2}|u[a-fA-F0-9]{,4}|U[a-fA-F0-9]{,8})'
        'name': 'constant.character.escape.c'
      }
      {
        'match': '\\\\.'
        'name': 'invalid.illegal.unknown-escape.c'
      }
    ]
  'string_placeholder':
    'patterns': [
      {
        'match': '(?x)%\n    \t\t\t\t\t\t(\\d+\\$)?                             # field (argument #)\n    \t\t\t\t\t\t[#0\\- +\']*                           # flags\n    \t\t\t\t\t\t[,;:_]?                              # separator character (AltiVec)\n    \t\t\t\t\t\t((-?\\d+)|\\*(-?\\d+\\$)?)?              # minimum field width\n    \t\t\t\t\t\t(\\.((-?\\d+)|\\*(-?\\d+\\$)?)?)?         # precision\n    \t\t\t\t\t\t(hh|h|ll|l|j|t|z|q|L|vh|vl|v|hv|hl)? # length modifier\n    \t\t\t\t\t\t[diouxXDOUeEfFgGaACcSspn%]           # conversion type\n    \t\t\t\t\t'
        'name': 'constant.other.placeholder.c'
      }
      {
        'match': '%'
        'name': 'invalid.illegal.placeholder.c'
      }
    ]
